​								Spring

## BeanFactory生命周期

1.**测试bean**

```java
public class TestBeanLifeCycle implements BeanNameAware, BeanFactoryAware,
        InitializingBean, ApplicationContextAware {

   public static AtomicInteger rank=new AtomicInteger(0);

   private OverviewService overviewService;
    
   //注入属性
   @Autowired
   public void setOverviewService(OverviewService overviewService){
       System.out.println(getBlankSpace(rank.get())+"TestBeanLifeCycle 属性注入 加载排序："+rank.incrementAndGet());
       this.overviewService=overviewService;
   }

    public static String getBlankSpace(int count){
        String space="";
        while (count>0){
            space+=" ";
            count--;
        }
        return space;
    }

    public TestBeanLifeCycle(){

        System.out.println(getBlankSpace(rank.get())+"TestBeanLifeCycle 构造器 加载排序："+rank.incrementAndGet());
    }

    public void init(){
        System.out.println(getBlankSpace(rank.get())+"TestBeanLifeCycle->init 加载排序："+rank.incrementAndGet());
    }

    public void destroy(){
        System.out.println(getBlankSpace(rank.get())+"TestBeanLifeCycle->destroy 加载排序："+rank.incrementAndGet());
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        System.out.println(getBlankSpace(rank.get())+"BeanFactoryAware->setBeanFactory 加载排序："+rank.incrementAndGet());
    }

    @Override
    public void setBeanName(String name) {
        System.out.println(getBlankSpace(rank.get())+"BeanNameAware->setBeanName 加载排序："+rank.incrementAndGet());
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        System.out.println(getBlankSpace(rank.get())+"InitializingBean afterPropertiesSet 加载排序："+rank.incrementAndGet());
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        System.out.println(getBlankSpace(rank.get())+"ApplicationContextAware->setApplicationContext 加载排序："+rank.incrementAndGet());
    }
}
```

1. 自定义InstantiationAwareBeanPostProcessor

```java
@Component
public class MyInstantiaionBeanPostProcessor implements InstantiationAwareBeanPostProcessor {
    @Override
    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName) throws BeansException {
        if(beanName.contains("testBeanLifeCycle")) {
            System.out.println(getBlankSpace(TestBeanLifeCycle.rank.get())+"InstantiationAwareBeanPostProcessor->postProcessBeforeInstantiation 加载排序：" + TestBeanLifeCycle.rank.incrementAndGet());
        }
        return null;
    }

    @Override
    public boolean postProcessAfterInstantiation(Object bean, String beanName) throws BeansException {
        if(beanName.contains("testBeanLifeCycle")) {
            System.out.println(getBlankSpace(TestBeanLifeCycle.rank.get())+"InstantiationAwareBeanPostProcessor->postProcessAfterInstantiation 加载排序：" + TestBeanLifeCycle.rank.incrementAndGet());
        }
        return true;
    }
}
```

1. 自定义BeanPostProcessor

```java
@Component
public class MyPostProcessor implements BeanPostProcessor {

    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
        if( bean.getClass() == TestBeanLifeCycle.class) {
            System.out.println(getBlankSpace(TestBeanLifeCycle.rank.get())+"BeanPostProcessor->postProcessBeforeInitialization 加载排序：" + TestBeanLifeCycle.rank.incrementAndGet());
        }
        return bean;
    }

    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {
        if( bean.getClass() == TestBeanLifeCycle.class){            System.out.println(getBlankSpace(TestBeanLifeCycle.rank.get())+"BeanPostProcessor->postProcessAfterInitialization 加载排序："+TestBeanLifeCycle.rank.incrementAndGet());
        }
        return bean;
    }
}
```

1. 将bean添加到容器中

```java
   //通过initMethos指定bean初始化方法，destroyMethod指定bean销毁时回调的方法
    @Bean(initMethod = "init",destroyMethod = "destroy")
    public TestBeanLifeCycle testBeanLifeCycle(){
        return new TestBeanLifeCycle();
    }
```

```java
InstantiationAwareBeanPostProcessor->postProcessBeforeInstantiation 加载排序：1 //bean实例化前调用
 TestBeanLifeCycle 构造器 加载排序：2 //bean实例化
  InstantiationAwareBeanPostProcessor->postProcessAfterInstantiation 加载排序：3 //bean实例化后调用
   TestBeanLifeCycle 属性注入 加载排序：4 //属性注入
    BeanNameAware->setBeanName 加载排序：5  //Awre方法注入相关对象
     BeanFactoryAware->setBeanFactory 加载排序：6 //Awre方法注入相关对象
      ApplicationContextAware->setApplicationContext 加载排序：7  //Awre方法注入相关对象
       BeanPostProcessor->postProcessBeforeInitialization 加载排序：8 //bean初始化前
        InitializingBean afterPropertiesSet 加载排序：9 //属性赋值后调用
         TestBeanLifeCycle->init 加载排序：10 //调用自定义初始化方法
          BeanPostProcessor->postProcessAfterInitialization 加载排序：11 //bean初始化后调用
		   TestBeanLifeCycle->destroy 加载排序：12 //bean销毁
```

根据输出，bean的生命周期其实分为四个阶段：

- **实例化**
  如果注册了InstantiationAwareBeanPostProcessor接口，则在实例化前调用InstantiationAwareBeanPostProcessor接口的postProcessBeforeInstantiation方法，在实例后可以调用postProcessAfterInstantiation方法。
  postProcessBeforeInstantiation在目标对象实例化之前调用，方法返回值是Object，可以返回任何类型的值。由于此时目标对象还没有实例化，所以如果这个放回值就会被用来替代原本应该生成的对象。如果目标对象被该方法的返回值替换了，后续生命周期方法只有postProcessAfterInitialization会调用，其他都不会调用。
  postProcessAfterInstantiation方法在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。如果该方法返回false，会忽略属性值的设置；如果返回true，会按照正常流程设置属性值。方法不管postProcessBeforeInstantiation方法的返回值是什么都会执行。

- **属性赋值**
  除了为bean的相关属性赋值，如果bean还实现了相关Aware接口，如BeanNameAware、BeanFactoryAware等等，spring还会回调setXxxAware方法将相应对象设置进来。
  在属性赋值完成后，如果Bean实现InitializingBean接口，Spring还会回调afterPropertiesSet方法。

- **初始化**
  bean的初始化跟bean的实例化不一样，bean实例只是创建这个bean的实例出来，其他的属性还没有准备好；bean初始化前bean各项属性已经被赋值，如通过Aware接口注入相关对象，bean本身的属性，afterPropertiesSet调用前表示各项属性都已经被赋值。
  Spring调用在init-method指定的方法进行初始化。
  如果向容器注册了BeanPostProcessor接口，则在初始化前会调用BeanPostProcessor的postProcessBeforeInitialization方法，在初始化后调用postProcessAfterInitialization方法。
  BeanPostProcessor称为后处理器。

- **销毁**
  如果Bean实现了DisposableBean接口，Spring会回调destroy方法；如果在destroy-method中指定了Bean销毁时回调的方法，Spring同样会调用这个方法。
  一般在这个destroy或destroy-method指定的方法中编写释放资源，记录日志等操作。
  **可以将Bean分为以下几类**

- Bean本身存在的方法：实例化Bean所需要调用的构造器，为属性赋值所需要调用的setter方法，以及通过init-method或destroy-method指定的初始化、销毁方法。inti-method和destroy-method可以使用注解 @PostConstruct、@PreDestroy替换。
  初始化方法会在bean初始化并且属性赋值已经完成后调用。

- Bean级生命周期接口方法：如BeanNameAware、BeanFactroyAware、InitalizingBean和Disposable。XxxAware方法用于注入资源对象，InitalizingBean接口方法会在属性全部赋值后调用，Disposable在Bean销毁前调用。

- 容器级生命周期接口方法：主要接口为InstantiationAwareBeanPostProcessor 和BeanPostProcessor ，他们的实现类称为“后置处理器”。传进来当前正在初始化的Bean，后处理器对所有Bean都有作用，但是也可以根据beanName或者ClassType过滤掉不需要处理的Bean。
  InstantiationAwareBeanPostProcessor接口方法会在**实例化**前后调用，BeanPostProcessor 中的接口方法会在**初始化**前后调用。

- 工厂后处理器接口方法：包括AspectJWeavingEanbler、CustomAutowireConfigurer、ConfigurationClassPostProcessor 等方法。它们也是容器级的方法，会在应用上下文装配好配置文件后，被立即调用。

  ![深究Spring中Bean的生命周期](https://img-blog.csdnimg.cn/img_convert/328d97e59f325652170e081b2de6091c.png) 
  上面这张生命周期图少了InstantiationAwareBeanPostProcessor接口中在实例化前后调用的方法。

**生命周期的源码在哪？**

```java
protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException {

        if (instanceWrapper == null) {
			//Bean实例化
            instanceWrapper = this.createBeanInstance(beanName, mbd, args);
        }
        try {
		    //Bean属性赋值
            this.populateBean(beanName, mbd, instanceWrapper);
			//Bean初始化
            exposedObject = this.initializeBean(beanName, exposedObject, mbd);
        } catch (Throwable var18) {
         
        }
}
```

Bean的实例化，属性赋值以及初始化都是在doCreateBean方法中实现，销毁则在容器关闭时调用的。

**BeanFactory和ApplicationContext不同**
这两者都是接口。
ApplicationContext间接继承了BeanFactory，但是同时又继承了其他接口，使得ApplicationContext拥有比BeanFactory更多的功能。对于ApplicationContext实现的容器，容器启动时就会创建所有Bean。优点：1.bean启动完成后就已经全部创建完成了，应用运行更快。2.启动时加载bean，能够更早发现问题并处理问题。
BeanFactory是容器最顶级的接口，拥有容器的最基础功能，负责Bean的创建，访问工作。对于BeanFactory实现的容器，在每次获取Bean时才会创建对象。好处是启动时不用创建对象，应用启动快，应用启动占用资源更少。
**@Bean注解指定初始化和销毁回调方法**

```java
@Bean(initMethod="init",destroyMethod="destory")
```

Spring只会帮我们管理scopetype为singleton的bean，对于为prototype的bean则交给调用者自己管理。
**更加详细的参考流程图**

![img](https://images0.cnblogs.com/i/580631/201405/181454040628981.png) 

## Spring如何注入XxxAware接口相关对象的？

```java
class ApplicationContextAwareProcessor implements BeanPostProcessor {
 
	private final ConfigurableApplicationContext applicationContext;
 
	private final StringValueResolver embeddedValueResolver;
 
 
	/**
	 * Create a new ApplicationContextAwareProcessor for the given context.
	 */
	public ApplicationContextAwareProcessor(ConfigurableApplicationContext applicationContext) {
		this.applicationContext = applicationContext;
		this.embeddedValueResolver = new EmbeddedValueResolver(applicationContext.getBeanFactory());
	}
 
 
	@Override
	@Nullable
	public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {
		AccessControlContext acc = null;
 
		if (System.getSecurityManager() != null &&
				(bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||
						bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||
						bean instanceof MessageSourceAware || bean instanceof ApplicationContextAware)) {
			acc = this.applicationContext.getBeanFactory().getAccessControlContext();
		}
 
		if (acc != null) {
			AccessController.doPrivileged((PrivilegedAction<Object>) () -> {
				invokeAwareInterfaces(bean);
				return null;
			}, acc);
		}
		else {
			invokeAwareInterfaces(bean);
		}
 
		return bean;
	}
 
	private void invokeAwareInterfaces(Object bean) {
		if (bean instanceof Aware) {  //判断该类是否是Aware的子类
			if (bean instanceof EnvironmentAware) {
 
				((EnvironmentAware) bean).setEnvironment(this.applicationContext.getEnvironment());
			}
			if (bean instanceof EmbeddedValueResolverAware) {
				((EmbeddedValueResolverAware) bean).setEmbeddedValueResolver(this.embeddedValueResolver);
			}
			if (bean instanceof ResourceLoaderAware) {
				((ResourceLoaderAware) bean).setResourceLoader(this.applicationContext);
			}
			if (bean instanceof ApplicationEventPublisherAware) {
				((ApplicationEventPublisherAware) bean).setApplicationEventPublisher(this.applicationContext);
			}
			if (bean instanceof MessageSourceAware) {
				((MessageSourceAware) bean).setMessageSource(this.applicationContext);
			}
			//spring帮你set一个applicationContext对象
			//所以当我们自己的一个对象实现了ApplicationContextAware对象只需要提供setter就能得到applicationContext对象
			//此处应该有点赞加收藏
			if (bean instanceof ApplicationContextAware) {
				if (!bean.getClass().getSimpleName().equals("IndexDao"))
				((ApplicationContextAware) bean).setApplicationContext(this.applicationContext);
			}
		}
	}
 
	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) {
		return bean;
	}
 
}
```

可以看出，所有的XxxAware相关都是在 postProcessBeforeInitialization之前被调用的

